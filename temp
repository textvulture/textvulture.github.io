---
title: "APR 2021, SCHEV data"
author: "Byunghwan Son"
# date: "`r format(Sys.Date(), '%B %e, %Y')`"
indent: true
output:
  bookdown::html_document2:
    toc: false
    fig_caption: yes
#  bookdown::pdf_document2:      # make sure: type="latex"
#    fig_caption: true
#    citation_package: natbib  
#    toc: false
#    includes:
#      in_header: /Users/bson3/Dropbox/latex/preamble.tex
#      before_body: /Users/bson3/Dropbox/latex/basic-title.tex # customize
#    keep_tex: true
#  bookdown::word_document2: 
#    fig_caption: yes
#    keep_md: yes
#  ": default
fontsize: 12pt
geometry: margin=1in
header-includes:
    - \usepackage{cochineal} 	
#    - \usepackage{mathpazo}
#    - \usepackage{mathptmx}
#    - \usepackage[lining]{ebgaramond}
link-citation: yes
urlcolor: blue
linkcolor: blue
bibliography: /Users/bson3//Dropbox/latex/mybib2.bib
biblio-style: /Users/bson3/Dropbox/latex/apsa.bst   ## necessary for PDF
#csl: /Users/bson3//Dropbox/latex/chicago.csl
csl: /Users/bson3//Dropbox/latex/apsa.csl
#csl: /Users/bson3//Dropbox/latex/apa.csl
#csl: /Users/bson3//Dropbox/latex/harvard.csl
#abstract: XXX
---

\pagenumbering{arabic}
\setcounter{page}{1}

```{r setup, include=FALSE}
library(knitr)
library(tidyverse)
library(kableExtra)
library(ggplot2)
library(rvest)
library(xml2)
```

# SCHEV Data
SCHEV offers important data but the raw data are not made available (there's an Excel icon, but it does not seem to work). Web-scrapping combined with graph-reading is necessary.

## CIP codes for GLOA

- BA: 45.0901 (International Relations and Affairs)
- MA: 30.2001 (International and Globalization Studies)

```{r, echo=F, warning=F, message=F, error=F}
# Option-1
# based on: https://towardsdatascience.com/tidy-web-scraping-in-r-tutorial-and-resources-ac9f72b4fe47
## Also see (https://afit-r.github.io/scraping) for the basics
# For a first try, let's use "Grand Total, All Reporting Institutions", "Four-Year Bachelor's Degree", and CIP=45.09011

# all.first.page <- "https://research.schev.edu/rdPage.aspx?rdReport=Enrollment.Enrollment_Trend_byProgram&inpPLEVONE=40&inpPROGONE=45.0901&inpUNITID=XXXALL&rdRnd=17363"

# all.first <- read_html(all.first.page)

# body_nodes <- all.first %>%
#   html_node("body") %>%
#  html_children()

# total <- all.first %>%
#  rvest::html_nodes('body') %>%
#  xml2::xml_find_all("//span[contains(@)]")


# Okay, I got lost as to which part of the source that I have to focus on and extract eventually. Moving on to Option-2
## This might be of help (might come back to it): https://stackoverflow.com/questions/61641069/scraping-data-from-javascript-graph-to-r
```


```{r, echo=F, warning=F, message=F, error=F}
# Option-2
## based on: https://www.r-bloggers.com/2018/12/how-to-scrape-data-from-a-javascript-website-with-r/

# total <- xml2::read_html("https://research.schev.edu/rdPage.aspx?rdReport=Enrollment.Enrollment_Trend_byProgram&inpPLEVONE=40&inpPROGONE=45.0901&inpUNITID=XXXALL&rdRnd=17363") %>%
#   rvest::html_nodes(".header") %>%
#   rvest::html_text()

# not working, so turning to PhantomJS method

# have already gotten the scraper_SCHEV.js saved in the working directory

# system("/Users/bson3/GoogleDrive/GMU/admin/GLOA_admin/APR2021/phantomjs-2.1.1-macosx/bin/phantomjs scraper_SCHEV.js")

# withJS <- xml2::read_html("total.html") %>%
#   rvest::html_nodes(".yui3-js-enabled") %>%
#   rvest::html_text()

# error, stuck!
```

```{r, echo=F, warning=F, message=F, error=F}
# Option 3, using metaDgitise

# library(metaDigitise)
# data <- metaDigitise(dir = "/Users/bson3/Google Drive/GMU/admin/GLOA_admin/APR2021/images/")

# when x2 value was asked and entered, error message: "Error in x[, 2] : subscript out of bounds"

```

```{r, echo=F, warning=F, message=F, error=F}
# Option 4
## Okay I found a new source where CSV files are available.
## Simply scrape the table the data spits out -- but drop-down menus are involved

# first, a simple text capturing (the "Note")


library(rvest)
library(tidyverse)
library(magrittr)


# just.trying <- read_html("https://research.schev.edu/rdPage.aspx?rdReport=Enrollment.E16_Report&inpUNITID=XXXALL&inpREPYEAR=1516&inpGENDER=T&inpPLEVONE=40&inpPROGONE=450901&rdRnd=97596")


# table = just.trying %>% 
#  html_nodes("table#DataTable1") %>%
#  html_table() %>%
#  .[[1]]

# okay, scaping one table was successful. But what about all?

# url <- 'https://research.schev.edu/rdPage.aspx?rdReport=Enrollment.E16_Report&inpUNITID=XXXALL&inpREPYEAR=2021&inpGENDER=T&inpPLEVONE=40&inpPROGONE=450901&rdRnd=61594'

# url_session <- html_session(url)

# nodes <- url_session %>% 
#  read_html(id = "inpUNITID") %>%
#  html_nodes("select option")

# df.ethnic.2020 <- data_frame(
#  link=xml_attr(nodes, "value"),
#  name=xml_text(nodes)
)

# df.ethnic.2020 <- df.ethnic.2020[-1,]

## okay this is good, but not quite there. It just picks up all the values here.

## continue here: https://www.colejharvey.com/scraping-disaggregated-election-data-from-multiple-websites-using-r-and-rvest/

### okay the codes above only scrapped the IDs (and such) of the dropdown menu, not the urls. This is probably because the webpage has hte 'Update' button and don't connect to the designated location right from the dropdown menu.

```

```{r, echo=F, warning=F, message=F, error=F}
# Option 5
# one way to do this, now that I know how to scrape the table of one page, is to manually putting in pages for each of the programs.

library(rvest)
library(readxl)
library(data.table)
library(readr)
library(tidyverse)
library(magrittr)


# looping?

############## 2015-6

dfNew = data.frame()  
  
 code <- c("231581", "231624", "232089", "232186", "232256", "232265",
          "232308", "232423", "232557", "232609", "232672", "232681", "232982",
          "233295", "233374", "233426", "233718", "233921", "234076", "234085",
          "234173")


results <- list()

result.index <- 0

for (CODE in code){
  
  url <- paste0("https://research.schev.edu/rdPage.aspx?rdReport=Enrollment.E16_Report&inpUNITID=", CODE ,"&inpREPYEAR=1516&inpGENDER=T&inpPLEVONE=40&inpPROGONE=450901")

  df2015 <- read_html(url)
  
  table = df2015 %>% 
  html_nodes("table#DataTable1") %>%
  html_table() %>%
  .[[1]]  
  
  df <- as.data.frame(table)
  df <- df[1:9]
  df <- df[-2, ]
  
  names(df) <- as.matrix(df[1, ])
  df <- df[-1, ]
 # df[] <- lapply(df, function(x) type.convert(as.character(x)))
  
  rownames(df) <- c()
  dfNew <- plyr::rbind.fill(dfNew, df)
  
Sys.sleep(10)
  
  }

dfNew2015 <- dfNew
school <- c("Bridgewater College",
            "William & Mary",
            "Ferrum College",
            "George Mason University",
            "Hampden-Sydney College",
            "Hampton University",
            "Hollins University",
            "James Madison University",
            "Liberty University",
            "University of Lynchburg",
            "Mary Baldwin University",
            "University of Mary Washington",
            "Old Dominion University",
            "Randolph-Macon College",
            "University of Richmond",
            "Roanoke College",
            "Sweet Briar College",
            "Virginia Tech",
            "University of Virginia",
            "Virginia Military Institute",
            "Virginia Wesleyan University")

dfNew2015$school <- school

########### 2020-21

dfNew = data.frame()  
  
code <- c("231581", "231624", "232089", "232186", "232256", "232265",
          "232308", "232423", "232557", "232609", "232672", "232681", "232982",
          "233295", "233374", "233426", "233718", "233921", "234076", "234085",
          "234173")


results <- list()

result.index <- 0

for (CODE in code){
  
  url <- paste0("https://research.schev.edu/rdPage.aspx?rdReport=Enrollment.E16_Report&inpUNITID=", CODE ,"&inpREPYEAR=2021&inpGENDER=T&inpPLEVONE=40&inpPROGONE=450901")

  df2020 <- read_html(url)
  
  table = df2020 %>% 
  html_nodes("table#DataTable1") %>%
  html_table() %>%
  .[[1]]  
  
  df <- as.data.frame(table)
  df <- df[1:9]
  df <- df[-2, ]
  
  names(df) <- as.matrix(df[1, ])
  df <- df[-1, ]
 # df[] <- lapply(df, function(x) type.convert(as.character(x)))
  
  rownames(df) <- c()
  dfNew <- plyr::rbind.fill(dfNew, df)
  
Sys.sleep(10)
  
  }

dfNew2020 <- dfNew

school <- c("Bridgewater College",
            "William & Mary",
            "George Mason University",
            "Hampden-Sydney College",
            "Hampton University",
            "Hollins University",
            "James Madison University",
            "Liberty University",
            "University of Lynchburg",
            "Mary Baldwin University",
            "University of Mary Washington",
            "Old Dominion University",
            "Randolph-Macon College",
            "Roanoke College",
            "Virginia Tech",
            "University of Virginia",
            "Virginia Military Institute",
            "Virginia Wesleyan University")

dfNew2020$school <- school

# need to work on capturing the school name from the HTML table and turn that into a column --> because of the mismatches over time. --> manually did for now.

dfNew2020$year <- 2020
dfNew2015$year <- 2015

schev <- rbind(dfNew2020, dfNew2015)

schev[1:9] <- lapply(schev[1:9], as.numeric)

schev$year <- lapply(schev$year, as.character)

#library(reshape2)
#schev.long <- melt(schev)
# devtools::install_github("hrbrmstr/ggalt")
library(ggalt)

schev %>%
  ggplot(aes(x= Total, y= reorder(school, Total),
             color=year)) +
  geom_point(position="dodge", stat='identity', alpha=0.75) +
  labs(y="School", x="Total Enrollment")

schev %>% 
  select(school, year, Total) %>%
  reshape(timevar = "year",
          idvar = c("school"),
          direction = 'wide') -> schev2

blue <- "#0171CE"
red <- "#DE4433"

schev2 %>%
  ggplot(aes(y= reorder(school, Total.2015))) +
  geom_dumbbell(aes(x=Total.2015, xend=Total.2015)) +
  geom_point(aes(x=Total.2015), color="red") +
  geom_point(aes(x=Total.2020), color="green") +
  labs(y="School", x="Total Enrollment") +
  theme_minimal() 

schev2 %>%
  ggplot(aes(y= reorder(school, Total.2015))) +
  geom_segment(aes(x=Total.2015, xend=Total.2020, yend=school),
               size = 0.5,
               arrow = arrow(length = unit(0.25, "cm"))) +
  geom_point(aes(x=Total.2015, color="2015"), size=4, alpha=0.3) +
  geom_point(aes(x=Total.2020, color="2020"), size=4, alpha=0.3) +
  labs(y="School", x="Total Enrollment") +
  theme_minimal() +
  theme(legend.position = c(0.85, 0.15)) +
  scale_color_manual(name = "Academic Year",
                     values = c("red", "blue"))


```